import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, a as space, t as text, f as claim_element, g as children, c as claim_space, h as claim_text, b as detach_dev, j as attr_dev, o as set_style, k as add_location, l as insert_dev, m as append_dev, n as noop, p as create_component, r as claim_component, u as mount_component, w as transition_in, x as transition_out, y as destroy_component } from './client.b177cfdc.js';

/* src/components/Card.svelte generated by Svelte v3.23.0 */

const file = "src/components/Card.svelte";

function create_fragment(ctx) {
	let div1;
	let img;
	let img_src_value;
	let t0;
	let div0;
	let h4;
	let b;
	let t1;
	let t2;
	let p;
	let t3;

	const block = {
		c: function create() {
			div1 = element("div");
			img = element("img");
			t0 = space();
			div0 = element("div");
			h4 = element("h4");
			b = element("b");
			t1 = text("Título");
			t2 = space();
			p = element("p");
			t3 = text("Subtítulo");
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true, style: true });
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h4 = claim_element(div0_nodes, "H4", {});
			var h4_nodes = children(h4);
			b = claim_element(h4_nodes, "B", {});
			var b_nodes = children(b);
			t1 = claim_text(b_nodes, "Título");
			b_nodes.forEach(detach_dev);
			h4_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "Subtítulo");
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "placeholder.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Project");
			set_style(img, "width", "100%");
			add_location(img, file, 1, 2, 21);
			add_location(b, file, 3, 8, 116);
			add_location(h4, file, 3, 4, 112);
			add_location(p, file, 4, 4, 139);
			attr_dev(div0, "class", "container svelte-iko93q");
			add_location(div0, file, 2, 2, 84);
			attr_dev(div1, "class", "card svelte-iko93q");
			add_location(div1, file, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, img);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, h4);
			append_dev(h4, b);
			append_dev(b, t1);
			append_dev(div0, t2);
			append_dev(div0, p);
			append_dev(p, t3);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Card> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Card", $$slots, []);
	return [];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment.name
		});
	}
}

/* src/routes/projects/index.svelte generated by Svelte v3.23.0 */
const file$1 = "src/routes/projects/index.svelte";

function create_fragment$1(ctx) {
	let h1;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let t10;
	let t11;
	let t12;
	let current;
	const card0 = new Card({ $$inline: true });
	const card1 = new Card({ $$inline: true });
	const card2 = new Card({ $$inline: true });
	const card3 = new Card({ $$inline: true });
	const card4 = new Card({ $$inline: true });
	const card5 = new Card({ $$inline: true });
	const card6 = new Card({ $$inline: true });
	const card7 = new Card({ $$inline: true });
	const card8 = new Card({ $$inline: true });
	const card9 = new Card({ $$inline: true });
	const card10 = new Card({ $$inline: true });
	const card11 = new Card({ $$inline: true });

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(/*a*/ ctx[0]);
			t1 = space();
			create_component(card0.$$.fragment);
			t2 = space();
			create_component(card1.$$.fragment);
			t3 = space();
			create_component(card2.$$.fragment);
			t4 = space();
			create_component(card3.$$.fragment);
			t5 = space();
			create_component(card4.$$.fragment);
			t6 = space();
			create_component(card5.$$.fragment);
			t7 = space();
			create_component(card6.$$.fragment);
			t8 = space();
			create_component(card7.$$.fragment);
			t9 = space();
			create_component(card8.$$.fragment);
			t10 = space();
			create_component(card9.$$.fragment);
			t11 = space();
			create_component(card10.$$.fragment);
			t12 = space();
			create_component(card11.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, /*a*/ ctx[0]);
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(card0.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(card1.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(card2.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(card3.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(card4.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(card5.$$.fragment, nodes);
			t7 = claim_space(nodes);
			claim_component(card6.$$.fragment, nodes);
			t8 = claim_space(nodes);
			claim_component(card7.$$.fragment, nodes);
			t9 = claim_space(nodes);
			claim_component(card8.$$.fragment, nodes);
			t10 = claim_space(nodes);
			claim_component(card9.$$.fragment, nodes);
			t11 = claim_space(nodes);
			claim_component(card10.$$.fragment, nodes);
			t12 = claim_space(nodes);
			claim_component(card11.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file$1, 9, 0, 110);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			mount_component(card0, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(card1, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(card2, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(card3, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(card4, target, anchor);
			insert_dev(target, t6, anchor);
			mount_component(card5, target, anchor);
			insert_dev(target, t7, anchor);
			mount_component(card6, target, anchor);
			insert_dev(target, t8, anchor);
			mount_component(card7, target, anchor);
			insert_dev(target, t9, anchor);
			mount_component(card8, target, anchor);
			insert_dev(target, t10, anchor);
			mount_component(card9, target, anchor);
			insert_dev(target, t11, anchor);
			mount_component(card10, target, anchor);
			insert_dev(target, t12, anchor);
			mount_component(card11, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(card0.$$.fragment, local);
			transition_in(card1.$$.fragment, local);
			transition_in(card2.$$.fragment, local);
			transition_in(card3.$$.fragment, local);
			transition_in(card4.$$.fragment, local);
			transition_in(card5.$$.fragment, local);
			transition_in(card6.$$.fragment, local);
			transition_in(card7.$$.fragment, local);
			transition_in(card8.$$.fragment, local);
			transition_in(card9.$$.fragment, local);
			transition_in(card10.$$.fragment, local);
			transition_in(card11.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card0.$$.fragment, local);
			transition_out(card1.$$.fragment, local);
			transition_out(card2.$$.fragment, local);
			transition_out(card3.$$.fragment, local);
			transition_out(card4.$$.fragment, local);
			transition_out(card5.$$.fragment, local);
			transition_out(card6.$$.fragment, local);
			transition_out(card7.$$.fragment, local);
			transition_out(card8.$$.fragment, local);
			transition_out(card9.$$.fragment, local);
			transition_out(card10.$$.fragment, local);
			transition_out(card11.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			destroy_component(card0, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(card1, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(card2, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(card3, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(card4, detaching);
			if (detaching) detach_dev(t6);
			destroy_component(card5, detaching);
			if (detaching) detach_dev(t7);
			destroy_component(card6, detaching);
			if (detaching) detach_dev(t8);
			destroy_component(card7, detaching);
			if (detaching) detach_dev(t9);
			destroy_component(card8, detaching);
			if (detaching) detach_dev(t10);
			destroy_component(card9, detaching);
			if (detaching) detach_dev(t11);
			destroy_component(card10, detaching);
			if (detaching) detach_dev(t12);
			destroy_component(card11, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let a = "hello world";
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Projects> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Projects", $$slots, []);
	$$self.$capture_state = () => ({ Card, a });

	$$self.$inject_state = $$props => {
		if ("a" in $$props) $$invalidate(0, a = $$props.a);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [a];
}

class Projects extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Projects",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Projects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNzIzNzRkMmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcHJvamVjdHMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9DYXJkLnN2ZWx0ZVwiXG4gbGV0IGEgPSAnaGVsbG8gd29ybGQnXG48L3NjcmlwdD5cblxuPHN0eWxlPlxuXG48L3N0eWxlPlxuXG48aDE+e2F9PC9oMT5cblxuXG48Q2FyZD48L0NhcmQ+XG48Q2FyZD48L0NhcmQ+XG48Q2FyZD48L0NhcmQ+XG48Q2FyZD48L0NhcmQ+XG5cbjxDYXJkPjwvQ2FyZD5cbjxDYXJkPjwvQ2FyZD5cbjxDYXJkPjwvQ2FyZD5cbjxDYXJkPjwvQ2FyZD5cblxuPENhcmQ+PC9DYXJkPlxuPENhcmQ+PC9DYXJkPlxuPENhcmQ+PC9DYXJkPlxuPENhcmQ+PC9DYXJkPlxuXG5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQkFTSyxHQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUNBQUQsR0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQVBELENBQUMsR0FBRyxhQUFhOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
