!function(){"use strict";const e=["client/client.f4338cb4.js","client/index.92374f1a.js","client/index.3f72178c.js","client/Card.89880610.js","client/index.d44696a6.js","client/index.636b0fac.js","client/index.a1a4a262.js","client/about.554c5701.js","client/index.a8c54275.js","client/index.274bca5c.js"].concat(["service-worker-index.html",".DS_Store","blog/multivariate-data-analysis/multivariate-cover.jpeg","favicon.png","global.css","logo-192.png","logo-512.png","manifest.json","parallel-bundling-prints/bundled.png","parallel-bundling-prints/categorical axes.png","parallel-bundling-prints/classic.png","placeholder.png","presentation.jpeg","successkid.jpg","vast-challenge-prints/.DS_Store","vast-challenge-prints/histogram-cell.png","vast-challenge-prints/histogram-distributions.png","vast-challenge-prints/main_screen.PNG","vast-challenge-prints/maps.png","vast-challenge-prints/median_filter.PNG","vast-challenge-prints/more_steamgraphs.PNG","vast-challenge-prints/poster.jpg","vast-challenge-prints/ratio_filter.PNG","vast-challenge-prints/steamgraphs-uncertainty.png","vast-challenge-prints/time_selection.PNG","vast-challenge-prints/timeline-anomalies.png","vast-challenge-prints/timeline-moments.png","vast-challenge-prints/timeline-scale.png","vizzes/.DS_Store","vizzes/a-battle-of-media.png","vizzes/treemap/data.tsv","vizzes/treemap/treemap-thumb.png"]),t=new Set(e);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1592167300174").then(t=>t.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)"cache1592167300174"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const n=new URL(e.request.url);n.protocol.startsWith("http")&&(n.hostname===self.location.hostname&&n.port!==self.location.port||(n.host===self.location.host&&t.has(n.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1592167300174").then(async t=>{try{const n=await fetch(e.request);return t.put(e.request,n.clone()),n}catch(n){const a=await t.match(e.request);if(a)return a;throw n}}))))})}();
